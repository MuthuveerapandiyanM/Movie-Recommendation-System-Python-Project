# -*- coding: utf-8 -*-
"""Movie Recommendataion.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1StDDjmj6pebpLWsWOJjgkXt9PIM-_v8d

# Movie Recommendation System

## Objective

The recommendation system analyzes the preferences of the user concerned, and then it uses this information to try to find similar movies.After that, the system provides movie recommendations for the user.

## Data Source

I access the dataset from Ybi Foundation Github Page

## Import Library
"""

import numpy as np
import pandas as pd
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

"""### Import Data"""

import pandas as pd

data = pd.read_csv('https://github.com/YBIFoundation/Dataset/raw/main/Movies%20Recommendation.csv',delimiter=',', encoding='utf-8')

data.head()

"""## Describe Data"""

data.info()

data.shape

data.columns

"""## Feature Selection"""

selected_features = data[['Movie_Genre', 'Movie_Keywords', 'Movie_Tagline',
       'Movie_Cast', 'Movie_Director']].fillna('')
print(selected_features)

# combining all the 5 selected features

combined_features = selected_features['Movie_Genre']+' '+selected_features['Movie_Keywords']+' '+selected_features['Movie_Tagline']+' '+selected_features['Movie_Cast']+' '+selected_features['Movie_Director']

print(combined_features)

"""## Feature Text Conversion To Tokens"""

vectorizer = TfidfVectorizer()

vect = vectorizer.fit_transform(combined_features)

"""## Similarity score using cosine similarity"""

similarity = cosine_similarity(vect)
print(similarity)

print(similarity.shape)

"""## Get Movie name as input from user"""

#getting movie name from the user

movie_name = input("Enter your Movie : ")

all_titles = data["Movie_Title"].tolist()
print(all_titles)

# finding the close match
close_match = difflib.get_close_matches(movie_name, all_titles)
print(close_match)

find_close_match = close_match[0]
print(find_close_match)

#finding the index
movie_index = data[data.Movie_Title == find_close_match]['Movie_ID'].values[0]
print(movie_index)

# getting a list of similar movies
sim_score = list(enumerate(similarity[movie_index]))
print(sim_score)

len(sim_score)

"""## Get Sort all movies based on Similarity score"""

# sorting the movies based on their similarity score
sorted_movie = sorted(sim_score, key = lambda x:x[1], reverse = True)
print(sorted_movie)

# print the name of similar movies based on the index

print('Movies suggested for you : \n')

i = 1

for movie in sorted_movie:
  index = movie[0]
  title_from_index = data[data.index==index]['Movie_Title'].values[0]
  if (i<31):
    print(i, '.',title_from_index)
    i+=1

"""## Movie Recomendation System"""

movie_name = input(' Enter your favourite movie name : ')

all_titles = data["Movie_Title"].tolist()

close_match = difflib.get_close_matches(movie_name, all_titles)

find_close_match = close_match[0]

movie_index = data[data.Movie_Title == find_close_match]['Movie_ID'].values[0]

sim_score = list(enumerate(similarity[movie_index]))

sorted_movie = sorted(sim_score, key = lambda x:x[1], reverse = True)

print('Movies suggested for you : \n')

i = 1

for movie in sorted_movie:
  index = movie[0]
  title_from_index = data[data.index==index]['Movie_Title'].values[0]
  if (i<31):
    print(i, '.',title_from_index)
    i+=1